import numpy as np
import streamlit as st
import pickle
import time
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
import os
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Configuration de la page
st.set_page_config(
    page_title="D√©tection de Fraudes Bancaires",
    page_icon='üè¶',
    layout='wide', # Utilisez 'wide' pour une mise en page plus spacieuse
    initial_sidebar_state='expanded'
)

# Initialiser les variables globales
scaler = None
pca = None
model = None
type_frequency_map = None

# Fonction de chargement des mod√®les
@st.cache_resource # Cache les mod√®les pour ne les charger qu'une seule fois
@st.cache_resource
def load_artifacts():
    try:
        current_dir = os.path.dirname(__file__)
        model_path = os.path.join(current_dir, 'model_SVM.pkl')
        scaler_path = os.path.join(current_dir, 'scaler.pkl')
        pca_path = os.path.join(current_dir, 'pca.pkl')
        freq_map_path = os.path.join(current_dir, 'type_frequency_map.pkl')
        
        with open(model_path, 'rb') as file:
            model = pickle.load(file)
        with open(scaler_path, 'rb') as file:
            scaler = pickle.load(file)
        with open(pca_path, 'rb') as file:
            pca = pickle.load(file)
        with open(freq_map_path, 'rb') as file:
            type_frequency_map = pickle.load(file)
            
        return model, scaler, pca,type_frequency_map
    except Exception as e:
        st.error(f"Erreur de chargement : {e}")
        return None, None, None, None

model, scaler, pca,type_frequency_map = load_artifacts()


# Chargement des mod√®les et des pr√©processeurs
# Utilisez st.cache_resource pour charger les mod√®les une seule fois et am√©liorer la performance
#@st.cache_resource
#def load_resources():
#    with open("model_SVM.pkl","rb") as file:
#        model = pickle.load(file)
#    with open("scaler.pkl", "rb") as file:
#        scaler = pickle.load(file)
#    with open("pca.pkl", "rb") as file:
#        pca = pickle.load(file)
#    return model, scaler, pca

#model, scaler, pca = load_resources()

# --- Style CSS personnalis√© ---
st.markdown("""
    <style>
    /* Importation d'une police Google Fonts pour un look plus moderne */
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap');

    html, body, [class*="st-"] {
        font-family: 'Roboto', sans-serif;
    }

    /* Style g√©n√©ral du corps de l'application */
    .main .block-container {
        padding-top: 3rem;
        padding-right: 2rem;
        padding-left: 2rem;
        padding-bottom: 3rem;
    }

    /* En-t√™te de la barre lat√©rale */
    .sidebar .sidebar-content {
        background-color: #f0f2f6; /* Couleur de fond l√©g√®rement diff√©rente pour la sidebar */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
    }
    .st-emotion-cache-1lcbm56 { /* Ciblage de l'en-t√™te de la sidebar */
        font-size: 1.8rem;
        color: #1a1a2e; /* Couleur de texte plus fonc√©e */
        font-weight: 700;
        margin-bottom: 20px;
    }

    /* Boutons de la barre lat√©rale */
    .stButton > button {
        width: 100%;
        padding: 12px 20px;
        margin-bottom: 10px;
        border-radius: 8px;
        border: none;
        background-color: #007bff; /* Bleu primaire */
        color: white;
        font-size: 1rem;
        font-weight: 500;
        transition: background-color 0.3s ease;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .stButton > button:hover {
        background-color: #0056b3; /* Bleu plus fonc√© au survol */
    }

    /* Titres de sections */
    h1 {
        color: #333333;
        font-weight: 700;
        text-align: center;
        margin-bottom: 1.5rem;
        border-bottom: 2px solid #e0e0e0;
        padding-bottom: 10px;
    }
    h2 {
        color: #444444;
        font-weight: 600;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    h3 {
        color: #555555;
        font-weight: 500;
        margin-top: 1.5rem;
        margin-bottom: 0.8rem;
    }

    /* Messages de succ√®s/erreur/info */
    .stAlert {
        border-radius: 8px;
    }
    .st-emotion-cache-1ldf3d0.e1gfxi8q1 { /* succ√®s */
        background-color: #d4edda;
        color: #155724;
        border-color: #c3e6cb;
    }
    .st-emotion-cache-1ldf3d0.e1gfxi8q2 { /* erreur */
        background-color: #f8d7da;
        color: #721c24;
        border-color: #f5c6cb;
    }
    .st-emotion-cache-1ldf3d0.e1gfxi8q3 { /* info */
        background-color: #d1ecf1;
        color: #0c5460;
        border-color: #bee5eb;
    }

    /* Cadre de contact */
    .contact-box {
        background-color: #e9ecef; /* Couleur de fond douce */
        padding: 30px;
        border-radius: 12px;
        margin-top: 3rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border-left: 5px solid #007bff; /* Bordure color√©e pour l'accent */
    }
    .contact-box h3 {
        color: #007bff;
        text-align: center;
        margin-bottom: 20px;
    }
    .contact-box ul {
        list-style: none;
        padding: 0;
        text-align: center;
    }
    .contact-box li {
        margin-bottom: 10px;
        font-size: 1.1rem;
        color: #555555;
    }
    .contact-box strong {
        color: #333333;
    }

    /* Am√©lioration des inputs */
    .stTextInput > div > div > input, .stNumberInput > div > div > input {
        border-radius: 8px;
        border: 1px solid #ced4da;
        padding: 10px;
        box-shadow: inset 0 1px 2px rgba(0,0,0,0.075);
    }
    .stSelectbox > div > div {
        border-radius: 8px;
        border: 1px solid #ced4da;
    }

    /* Spinner */
    .stSpinner > div > div {
        color: #007bff;
    }

    /* Styles pour la jauge de pr√©cision sur la page d'accueil */
    .progress-container-accueil {
        width: 80%;
        background-color: #e0e0e0;
        border-radius: 25px;
        overflow: hidden;
        margin: 30px auto 10px auto; /* Marge ajust√©e */
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.2);
    }
    .progress-bar-accueil {
        height: 35px; /* Hauteur l√©g√®rement augment√©e */
        background-color: #28a745; /* Vert pour la pr√©cision */
        border-radius: 25px;
        text-align: center;
        color: white;
        line-height: 35px;
        font-weight: bold;
        font-size: 1.3em; /* Taille de police plus grande */
        transition: width 0.5s ease-in-out;
    }
    .accuracy-text {
        text-align:center;
        font-size:1.1em;
        color:#555;
        margin-top: 10px;
    }
    
        .welcome-container {
        background-color: #f8f8f8; /* L√©g√®re couleur de fond pour le cadre */
        border: 2px solid #e0e0e0; /* Bordure discr√®te */
        border-radius: 15px; /* Coins arrondis */
        padding: 30px; /* Espace interne */
        margin-bottom: 2rem; /* Marge en dessous pour s√©parer des autres √©l√©ments */
        box-shadow: 0 4px 12px rgba(0,0,0,0.08); /* Ombre l√©g√®re pour un effet 3D */
        text-align: center; /* Centrer le contenu √† l'int√©rieur */
    }

    /* Styles pour le titre H1 √† l'int√©rieur du conteneur, en conservant votre couleur marron */
    .welcome-container h1 {
        color: brown; /* Votre couleur conserv√©e */
        font-family: 'Times New Roman', serif; /* Votre police conserv√©e */
        font-size: 2.5em; /* Taille de police l√©g√®rement ajust√©e pour le titre */
        margin-bottom: 0.5em; /* Marge en bas du titre */
        padding-bottom: 0; /* Supprimer le padding bottom si d√©j√† dans le H1 */
        border-bottom: none; /* Supprimer la bordure du H1 si elle existe */
    }

    /* Style pour le sous-titre h4 */
    .welcome-container h4 {
        color: #555555; /* Couleur de texte plus douce pour le sous-titre */
        font-size: 1.2em;
        margin-top: 0;
    }


    </style>
    """, unsafe_allow_html=True)

# Barre lat√©rale
st.sidebar.title("üè¶D√©tection de Fraudes Bancaires")
st.sidebar.image("bank_logo.jpg", use_container_width=True)

# Navigation via des boutons radio pour un style plus propre et une meilleure UX
page = st.sidebar.radio(
    "Naviguez entre les sections :",
    ('Accueil ü§ó', 'Visualisation üìä', 'Pr√©diction üè¶'),
    key='main_navigation'
)

# --- Contenu des pages ---

if page == 'Accueil ü§ó':
    with st.container(border=False): # border=False si vous gerez la bordure via CSS
        st.markdown("""
            <div class="welcome-container">
                <h1>Bienvenue sur l'application de D√©tection de Fraudes Bancaires üí∏</h1>
            </div>
        """, unsafe_allow_html=True)
    col1, col2= st.columns([1,3])
    with col1:
        st.image("Hello.gif",width=200,use_container_width=True)
    with col2:
        st.markdown("<br><br>", unsafe_allow_html=True)
        #st.image("bank-icon.jpg", width=250,use_container_width=True)
        # Utilisez un conteneur pour le texte d'accueil
    
        #st.markdown("<h1 style='color:brown;font-family:'Times New Roman';text-align:center;'>Bienvenue sur l'application de D√©tection De Fraudes Bancairesü§ë</h1>",unsafe_allow_html=True)
        #st.title("Bienvenue sur l'application de D√©tection de Fraudes Bancaires")
        st.markdown("""
            <h4 style='text-align:center;'>
            Cette application vous offre des outils puissants pour analyser et pr√©dire les transactions frauduleuses.üö®
            </h4>
        """, unsafe_allow_html=True)

    # Cr√©e deux colonnes avec des largeurs relatives
    # Ici, la premi√®re colonne (col1) sera 3 fois plus large que la deuxi√®me (col2)
   
    
    #st.image('bank-icon.jpg',width=200) # Utilisation de la largeur de la colonne

    st.markdown("---") # S√©parateur visuel

    st.subheader("Ce que vous pouvez faire avec cette application :")
    st.markdown("""
    - **Charger vos donn√©es**üóí : Importez votre jeu de donn√©es de transactions bancaires au format CSV pour une analyse approfondie.
    - **Visualiser les donn√©es**üìä : Explorez les caract√©ristiques de vos transactions gr√¢ce √† des graphiques interactifs et des statistiques descriptives.
    - **Pr√©dire la fraude**üö® : Utilisez notre mod√®le pr√©-entra√Æn√© pour √©valuer le risque de fraude sur de nouvelles transactions en entrant simplement les informations requises.
    """)

    st.info("""
        **Note :** Les sections de chargement de donn√©es et de pr√©diction fonctionnent ind√©pendamment.
        Vous n'avez pas besoin de charger des donn√©es pour effectuer une pr√©diction individuelle.
    """)

    st.markdown("---")

    ## --- Affichage de la pr√©cision du mod√®le sur la page d'accueil ---
    st.subheader("Performance G√©n√©rale du Mod√®le")
    st.markdown("""
        <p style='text-align:center; font-size:1.1em; color:#555;'>
            Notre mod√®le de d√©tection de fraude a √©t√© rigoureusement test√© et d√©montre une excellente capacit√©
            √† identifier les transactions frauduleuses.
        </p>
    """, unsafe_allow_html=True)

    # VOUS POUVEZ CHANGER CETTE VALEUR DE PR√âCISION ICI :
    model_accuracy_accueil = 0.989  # <--- METTEZ LA VALEUR DE PR√âCISION QUE VOUS VOULEZ AFFICHER (entre 0 et 1)

    accuracy_percent_accueil = int(model_accuracy_accueil * 100)

    st.markdown(f"""
        <div class="progress-container-accueil">
            <div class="progress-bar-accueil" style="width: {accuracy_percent_accueil}%;">
                {accuracy_percent_accueil}%
            </div>
        </div>
        <p class="accuracy-text">
            Ce mod√®le atteint une pr√©cision remarquable de <strong>{model_accuracy_accueil:.1%}</strong>
            sur nos jeux de donn√©es de test.
        </p>
    """, unsafe_allow_html=True)
    ## --- Fin de l'affichage de la pr√©cision ---

    # Section Contact
    st.markdown("""
        <div class="contact-box">
            <h3>Contactez-nous</h3>
            <p>Si vous avez des questions ou souhaitez en savoir plus, n'h√©sitez pas √† nous contacter :</p>
            <ul>
                <li><strong>Email :</strong> ccmlav@gmail.com</li>
                <li><strong>T√©l√©phone :</strong> +237 000000000</li>
            </ul>
        </div>
    """, unsafe_allow_html=True)

elif page == 'Visualisation üìä':
    st.title('üìà Analyse Exploratoire et Visualisation')
    st.markdown("---")
    st.image('vis.jpg',width=500)
    st.markdown("Explorez les types de donn√©es, le nombre de valeurs non-nulles et la pr√©sence de donn√©es manquantes pour chaque colonne.")

    st.markdown("<h3 style='text-align:center;'>1. Chargement de votre fichier de donn√©es (CSV)</h3>", unsafe_allow_html=True)
    uploaded_file = st.file_uploader("Glissez-d√©posez un fichier CSV ici ou cliquez pour le parcourir", type="csv")

    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            st.session_state['df'] = df # Stocker le DataFrame dans session_state
            st.success("Fichier charg√© avec succ√®s ! ‚úÖ")

            st.subheader("Aper√ßu des Donn√©es")
            st.dataframe(df.head())

            st.subheader("üìä Informations G√©n√©rales sur les Donn√©es")
            # ... (code de chargement du fichier CSV et aper√ßu du DF) ...

            #st.subheader("üìä Informations D√©taill√©es sur les Donn√©es")

            # Cr√©er un DataFrame pour afficher les informations cl√©s
            info_df = pd.DataFrame({
                'Colonne': df.columns,
                'Type de Donn√©es': df.dtypes,
                'Valeurs Non-Nulles': df.count(),
                'Valeurs Manquantes': df.isnull().sum(),
                'Pourcentage Manquant (%)': (df.isnull().sum() / len(df) * 100).round(2)
            })

            # Appliquer des couleurs conditionnelles pour le pourcentage manquant
            def highlight_missing(s):
                return ['background-color: #ffe6e6' if s['Pourcentage Manquant (%)'] > 0 else '' for _ in s] # Rouge p√¢le pour les manquants

            st.dataframe(info_df.style.apply(highlight_missing, axis=1), use_container_width=True)

            st.info(f"Le jeu de donn√©es contient **{len(df)} lignes** et **{len(df.columns)} colonnes** au total.")

            # Optionnel : Afficher l'output brut de df.info() dans un expander pour les d√©tails techniques
            with st.expander("Voir l'output technique complet de df.info()"):
                buffer = io.StringIO()
                df.info(buf=buffer)
                st.code(buffer.getvalue(), language='text') # Utiliser st.code pour un meilleur formatage du texte brut


            st.subheader("Statistiques Descriptives")
            st.dataframe(df.describe())

            st.markdown("---")
            st.markdown("<h3 style='text-align:center;'>2. Analyse Exploratoire des Donn√©es (EDA)</h3>", unsafe_allow_html=True)
            st.markdown("Utilisez les options ci-dessous pour g√©n√©rer des graphiques et mieux comprendre vos donn√©es.")

            with st.expander("G√©n√©rer des graphiques interactifs", expanded=True): # Ouvrir l'expander par d√©faut
                eda_col1, eda_col2 = st.columns(2)

                with eda_col1:
                    chart_type = st.selectbox(
                        "Choisissez le type de graphique :",
                        ["Histogramme", "Bo√Æte √† Moustaches", "Nuage de Points", "Comptage"],
                        key='chart_selector'
                    )
                    selected_column_x = st.selectbox(
                        "Choisissez la colonne pour l'axe X :",
                        df.columns.tolist(),
                        key='column_x_selector'
                    )

                with eda_col2:
                    selected_column_y = None
                    if chart_type == "Nuage de Points":
                        selected_column_y = st.selectbox(
                            "Choisissez la colonne pour l'axe Y :",
                            [col for col in df.columns if col != selected_column_x],
                            key='column_y_selector'
                        )
                    color_by = st.checkbox("Colorer par 'isFraud' (si disponible)", value=True)
                    if 'isFraud' not in df.columns:
                        color_by = False
                        st.warning("La colonne 'isFraud' n'est pas pr√©sente dans votre dataset pour la coloration.")

                if st.button("G√©n√©rer le graphique üìà", key='generate_plot_button'):
                    with st.spinner("G√©n√©ration du graphique en cours..."):
                        fig, ax = plt.subplots(figsize=(12, 7)) # Taille de figure am√©lior√©e

                        if chart_type == "Histogramme":
                            sns.histplot(df[selected_column_x], kde=True, ax=ax, color='#28a745') # Couleur plus esth√©tique
                            ax.set_title(f"Distribution de '{selected_column_x}'", fontsize=16)
                            ax.set_xlabel(selected_column_x, fontsize=12)
                            ax.set_ylabel("Fr√©quence", fontsize=12)
                        elif chart_type == "Bo√Æte √† Moustaches":
                            sns.boxplot(y=df[selected_column_x], ax=ax, color='#ffc107')
                            ax.set_title(f"Bo√Æte √† Moustaches de '{selected_column_x}'", fontsize=16)
                            ax.set_ylabel(selected_column_x, fontsize=12)
                        elif chart_type == "Nuage de Points" and selected_column_y:
                            if color_by and 'isFraud' in df.columns:
                                sns.scatterplot(x=df[selected_column_x], y=df[selected_column_y], hue=df['isFraud'], ax=ax, palette='viridis', alpha=0.7)
                            else:
                                sns.scatterplot(x=df[selected_column_x], y=df[selected_column_y], ax=ax, color='#17a2b8', alpha=0.7)
                            ax.set_title(f"Nuage de Points : '{selected_column_x}' vs '{selected_column_y}'", fontsize=16)
                            ax.set_xlabel(selected_column_x, fontsize=12)
                            ax.set_ylabel(selected_column_y, fontsize=12)
                        elif chart_type == "Comptage":
                            sns.countplot(x=df[selected_column_x], ax=ax, palette='coolwarm')
                            ax.set_title(f"Comptage des valeurs de '{selected_column_x}'", fontsize=16)
                            ax.set_xlabel(selected_column_x, fontsize=12)
                            ax.set_ylabel("Nombre d'occurrences", fontsize=12)
                            plt.xticks(rotation=45, ha='right') # Rotation pour les √©tiquettes longues

                        plt.tight_layout() # Ajustement automatique pour √©viter les chevauchements
                        st.pyplot(fig)
                        st.balloons()
                        st.success("Graphique g√©n√©r√© avec succ√®s ! ‚ú®")
        except Exception as e:
            st.error(f"Une erreur est survenue lors du chargement ou de l'analyse du fichier : {e}")
            st.info("Veuillez vous assurer que le fichier est un CSV valide et correctement format√©.")
    else:
        st.info("Veuillez charger un fichier CSV pour commencer l'exploration des donn√©es.")

elif page == 'Pr√©diction üè¶':
    st.image("th (1).jpg",width=200) # Assurez-vous que l'image est dans le m√™me r√©pertoire
    st.title('üí∏ Pr√©diction de Fraudes Bancaires')
    st.markdown("---")
    
    # La disposition des images et texte d'introduction
    col_intro1, col_intro2 = st.columns([3,1])
    with col_intro2:
        st.image('fraud2.jpg', width=500) # Assurez-vous que l'image est dans le m√™me r√©pertoire
    
    with col_intro1:
        st.markdown('Remplissez les informations ci-dessous pour d√©terminer si la transaction est frauduleuse.')
        
        # Afficher le statut de chargement du mod√®le
        if model is not None:
            st.success('Mod√®le pr√™t !')
        else:
            st.error('Mod√®le non charg√©. Impossible de faire des pr√©dictions.')
            st.stop() # Arr√™ter l'ex√©cution si le mod√®le n'est pas disponible

    
    # --- Section de D√©tails de la Transaction pour la pr√©diction -----------------

    # Section de pr√©diction
    st.subheader("D√©tails de la Transaction")
    col_pred1, col_pred2 = st.columns(2)

    with col_pred1:
        step = st.number_input("Step (Heure de la transaction en heures)", min_value=0, value=1)
        amount = st.number_input("Amount (Montant de la transaction)", min_value=0.0, value=1000.0, format="%.2f")
        oldbalanceOrg = st.number_input("Ancien solde de l'initiateur", min_value=0.0, value=10000.0, format="%.2f")
        
    with col_pred2:
        newbalanceOrig = st.number_input("Nouveau solde de l'initiateur", min_value=0.0, value=9000.0, format="%.2f")
        oldbalanceDest = st.number_input("Ancien solde du destinataire", min_value=0.0, value=5000.0, format="%.2f")
        # Dans votre section de pr√©diction :
        if type_frequency_map is None:
            st.error("Le mapping des types de transactions n'a pas pu √™tre charg√©. Impossible de continuer.")
            st.stop()

        Type = st.selectbox(
            "Type de transaction",
            list(type_frequency_map.keys()) if type_frequency_map else [],
            key="pred_type"
        )

    type_encoded = type_frequency_map.get(Type, 0)

    if st.button('üí∏ Pr√©dire la Fraude'):
        # 1. Cr√©ez le DataFrame d'entr√©e avec les m√™mes colonnes qu'√† l'entra√Ænement
        input_df = pd.DataFrame([[
            step,
            amount,                
            oldbalanceOrg,
            newbalanceOrig,
            oldbalanceDest,       
            type_encoded         
        ]], columns=[
            'step', 
            'amount',            
            'oldbalanceOrg', 
            'newbalanceOrig',
            'oldbalanceDest',    
            'type_encoded'       
        ])
        
        # Appliquez les transformations COMME PENDANT L'ENTRA√éNEMENT
        input_df['amount'] = np.log1p(input_df['amount'])  
        
        # 3. S√©lectionnez les colonnes dans le bon ordre (comme pendant l'entra√Ænement)
        features_to_scale = input_df[['step', 'amount', 'oldbalanceOrg', 'newbalanceOrig','oldbalanceDest','type_encoded']]
        
        # Cr√©ez une liste des features dans L'ORDRE EXACT de l'entra√Ænement
        feature_order = [
            'step',
            'amount',          
            'oldbalanceOrg',
            'newbalanceOrig',
            'oldbalanceDest',
            'type_encoded',
        ]
        features_for_prediction = input_df[feature_order]
        
        with st.spinner('Analyse de la transaction en cours...'):
            try:
                scaled_features = scaler.transform(features_to_scale)
            
                # 5. Application du PCA
                pca_features = pca.transform(scaled_features)
            
                # Pr√©diction directe
                prediction = model.predict(pca_features)[0]
                decision_score = model.decision_function(pca_features)[0]
                time.sleep(1)

                st.success('Pr√©diction termin√©e ! ü§ó')

                if prediction == 1:
                    st.error("üö® **Transaction frauduleuse d√©tect√©e !** Veuillez enqu√™ter.")
                    st.write(f"**Score de d√©cision :** `{decision_score:.4f}`")
                    st.image("https://media.giphy.com/media/l0Hea3gqR4m3s8Q0/giphy.gif", width=200)
                else:
                    st.success("‚úÖ **Transaction non frauduleuse.** Tout semble normal.")
                    st.write(f"**Score de d√©cision :** `{decision_score:.4f}`")
                    st.balloons()
    
 
            except Exception as e:
                st.error(f"Erreur lors de la pr√©diction : {e}")
                st.warning("V√©rifiez les valeurs entr√©es.")
                st.write("Features input:", features_to_scale)  
        
st.markdown("---")
